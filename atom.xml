<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>namco&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://namco1992.github.io/"/>
  <updated>2016-06-12T14:18:18.000Z</updated>
  <id>http://namco1992.github.io/</id>
  
  <author>
    <name>namco</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何优雅地通过字符串动态调用函数</title>
    <link href="http://namco1992.github.io/2016-06-12-how-to-call-function-by-string.html"/>
    <id>http://namco1992.github.io/2016-06-12-how-to-call-function-by-string.html</id>
    <published>2016-06-12T14:07:35.000Z</published>
    <updated>2016-06-12T14:18:18.000Z</updated>
    
    <content type="html">&lt;p&gt;前一段时间为公司的业务写了一个非常轻量级的监控平台，最近抽出空来整理一下思路。首先从一个小 trick 开始吧。&lt;/p&gt;
&lt;h2 id=&quot;scrapy-中的-item-pipeline&quot;&gt;&lt;a href=&quot;#scrapy-中的-item-pipeline&quot; class=&quot;headerlink&quot; title=&quot;scrapy 中的 item pipeline&quot;&gt;&lt;/a&gt;scrapy 中的 item pipeline&lt;/h2&gt;&lt;p&gt;我写的监控平台的 pipeline 机制主要模仿了 scrapy 中的 item pipeline。 在 scrapy 的配置文件中，pipeline 的配置表示方式是这样的：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ITEM_PIPELINES = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;myproject.pipelines.FirstPipeline&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;myproject.pipelines.SecondPipeline&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ITEM_PIPELINES&lt;/code&gt;作为一个字典，&lt;code&gt;key&lt;/code&gt;就是处理类的路径，&lt;code&gt;value&lt;/code&gt;值的大小则代表了该 pipeline 的优先级。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们的监控平台远没有 scrapy 这么复杂，因此就只需要一个列表，根据列表顺序依次执行函数就可以了。于是问题来了。(学挖掘机哪家强？)我们如何像 scrapy 一样通过字符串表示的路径来读取出相应的类或者函数呢？&lt;/p&gt;
&lt;h2 id=&quot;importlab-的使用&quot;&gt;&lt;a href=&quot;#importlab-的使用&quot; class=&quot;headerlink&quot; title=&quot;importlab 的使用&quot;&gt;&lt;/a&gt;importlab 的使用&lt;/h2&gt;&lt;p&gt;其实非常简单，我们只需要使用&lt;code&gt;importlib&lt;/code&gt;来引入对应的包就可以了。如果需要返回具体的执行函数，就利用&lt;code&gt;getattr&lt;/code&gt;。具体代码示例如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;import_attribute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Return an attribute from a dotted path name (e.g. &quot;path.to.func&quot;).&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    module_name, attribute = name.rsplit(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    module = importlib.import_module(module_name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getattr(module, attribute)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func = import_attribute(&lt;span class=&quot;string&quot;&gt;&#39;monitor_platform.src.pipelines.common_pipeline.send_mail&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在主线程中，调用&lt;code&gt;import_attribute&lt;/code&gt;，首先&lt;code&gt;.rsplit&lt;/code&gt;将包名与属性名分离，然后通过&lt;code&gt;importlib.import_module&lt;/code&gt;引入包，最后通过&lt;code&gt;getattr&lt;/code&gt;获取到该属性，此时获取到的&lt;code&gt;func&lt;/code&gt;就是我们希望执行的函数了。只要提供一个 pipeline 的列表，就可以依次引入，顺序执行。就是这么简单。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前一段时间为公司的业务写了一个非常轻量级的监控平台，最近抽出空来整理一下思路。首先从一个小 trick 开始吧。&lt;/p&gt;
&lt;h2 id=&quot;scrapy-中的-item-pipeline&quot;&gt;&lt;a href=&quot;#scrapy-中的-item-pipeline&quot; class=&quot;headerlink&quot; title=&quot;scrapy 中的 item pipeline&quot;&gt;&lt;/a&gt;scrapy 中的 item pipeline&lt;/h2&gt;&lt;p&gt;我写的监控平台的 pipeline 机制主要模仿了 scrapy 中的 item pipeline。 在 scrapy 的配置文件中，pipeline 的配置表示方式是这样的：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ITEM_PIPELINES = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;myproject.pipelines.FirstPipeline&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;myproject.pipelines.SecondPipeline&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ITEM_PIPELINES&lt;/code&gt;作为一个字典，&lt;code&gt;key&lt;/code&gt;就是处理类的路径，&lt;code&gt;value&lt;/code&gt;值的大小则代表了该 pipeline 的优先级。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://namco1992.github.io/tags/python/"/>
    
      <category term="trick" scheme="http://namco1992.github.io/tags/trick/"/>
    
  </entry>
  
  <entry>
    <title>从 Flask 中视图函数说开来</title>
    <link href="http://namco1992.github.io/2016-06-12-tips-about-flask-view-function.html"/>
    <id>http://namco1992.github.io/2016-06-12-tips-about-flask-view-function.html</id>
    <published>2016-06-12T13:52:26.000Z</published>
    <updated>2016-06-12T13:58:05.000Z</updated>
    
    <content type="html">&lt;p&gt;自从夸下海口从朋友那里接下私活，就开始抽空看看有关 Flask 的东西。还记得刚入职的时候学习 Django，只是 Tutorial 那几个小教程就翻来覆去看了几遍，最终还是有些一头雾水，又觉得过于繁杂，索性就算了。这次也趁此机会把 Flask 上手一下，也越发理解了为什么有人说“自定义的 Flask 最终也会变成一个 Django”，可能后面有时间再去把 Django 拾起来就没那么困难了。&lt;/p&gt;
&lt;p&gt;上面都是题外话，下面需要说的是一个关于 Flask 的一个小细节，首先我们需要明确一下在 Flask 中路由功能的实现过程是怎样的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Flask-中的路由&quot;&gt;&lt;a href=&quot;#Flask-中的路由&quot; class=&quot;headerlink&quot; title=&quot;Flask 中的路由&quot;&gt;&lt;/a&gt;Flask 中的路由&lt;/h2&gt;&lt;h3 id=&quot;route注册路由&quot;&gt;&lt;a href=&quot;#route注册路由&quot; class=&quot;headerlink&quot; title=&quot;route注册路由&quot;&gt;&lt;/a&gt;&lt;code&gt;route&lt;/code&gt;注册路由&lt;/h3&gt;&lt;p&gt;在 Flask 中的路由注册是有多种方式的，在这里我们只介绍使用&lt;code&gt;route&lt;/code&gt;装饰器的注册方式。一言以蔽之，Flask  中&lt;code&gt;route&lt;/code&gt;的作用就是建立url与处理函数的映射。&lt;/p&gt;
&lt;p&gt;通过阅读官方的 API 文档可以得知，&lt;code&gt;route&lt;/code&gt;函数所必需的参数只有一个，我们只介绍一下常用参数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rule&lt;/code&gt;，必选参数。通过&lt;code&gt;rule&lt;/code&gt;来指定该视图函数所对应的 url 地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;，就是url和处理函数映射关系中的一个中介。在 Flask 中一个路由的过程是这样的：rule –&amp;gt; endpoint –&amp;gt; view function。&lt;code&gt;endpoint&lt;/code&gt;这个参数通常会被忽略，当 &lt;code&gt;endpoint&lt;/code&gt;未指定时，Flask 会为其指定一个默认名，就是视图函数的名称。当然，你也可以显式指定&lt;code&gt;endpoint&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;methods&lt;/code&gt;，用于指定接受的请求方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上，一般你会看到一个视图函数用以下方式进行路由注册：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@app.route(&#39;/&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# whatever you want&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;view-functions与url-map&quot;&gt;&lt;a href=&quot;#view-functions与url-map&quot; class=&quot;headerlink&quot; title=&quot;view_functions与url_map&quot;&gt;&lt;/a&gt;&lt;code&gt;view_functions&lt;/code&gt;与&lt;code&gt;url_map&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;这两个就是深入底层的 Flask 的路由注册最关键的两个变量。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Flask.url_map&lt;/code&gt;保存所有的 (url, endpoint, method) 映射关系，是 werkzeug 中自己实现的一个&lt;code&gt;Map&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flask.view_functions&lt;/code&gt;保存所有的 {endpoint: function} 映射关系，本质就是一个字典对象。&lt;br&gt;Flask 接收到请求之后，由&lt;code&gt;url_map&lt;/code&gt;解析到对应的 &lt;code&gt;ednpoint&lt;/code&gt;，然后通过&lt;code&gt;view_functions&lt;/code&gt;的映射找到对应的视图函数，最终调用指定的函数，完成路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;需要注意的细节&quot;&gt;&lt;a href=&quot;#需要注意的细节&quot; class=&quot;headerlink&quot; title=&quot;需要注意的细节&quot;&gt;&lt;/a&gt;需要注意的细节&lt;/h2&gt;&lt;p&gt;根据上文的分析，在&lt;code&gt;url_map&lt;/code&gt;中，我们的&lt;code&gt;url&lt;/code&gt;和&lt;code&gt;endpoint&lt;/code&gt;都必须是唯一的。一个&lt;code&gt;url&lt;/code&gt;，只能够对应一个 &lt;code&gt;endpoint&lt;/code&gt;，必然也就只能对应一个视图函数，是一个一一对应的关系。而视图函数可以注册多个路由，是一个一对多的关系。这一点的理解对于我们下文要指出的问题非常关键。&lt;/p&gt;
&lt;h2 id=&quot;如何在-Flask-中的视图函数上使用装饰器&quot;&gt;&lt;a href=&quot;#如何在-Flask-中的视图函数上使用装饰器&quot; class=&quot;headerlink&quot; title=&quot;如何在 Flask 中的视图函数上使用装饰器&quot;&gt;&lt;/a&gt;如何在 Flask 中的视图函数上使用装饰器&lt;/h2&gt;&lt;p&gt;对于装饰器，如果还有读者不了解的话，可以阅读一下&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318435599930270c0381a3b44db991cd6d858064ac0000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;廖雪峰的教程&lt;/a&gt;，其中关键的一点是对&lt;code&gt;functools.wraps&lt;/code&gt;的使用。然而像我这样平时不太在乎这个函数签名问题的人，可能会写出下面这种代码：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decorater&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; func(*args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然而，如果你在 Flask 中用于视图函数的装饰器也这么写的话，就会出现以下异常：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AssertionError: View function mapping &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; overwriting an existing endpoint function&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是为什么呢？&lt;/p&gt;
&lt;p&gt;因为我们上文介绍过了，如果没有显式指定&lt;code&gt;endpoint&lt;/code&gt;的时候，会默认使用视图函数的&lt;code&gt;__name__&lt;/code&gt;属性作为&lt;code&gt;endpoint&lt;/code&gt;的值，并且放在映射表中。原本视图函数的名称是&lt;code&gt;func.__name__&lt;/code&gt;，而使用了上述装饰器之后，因为所返回的变成了&lt;code&gt;wrapper&lt;/code&gt;函数，所以你的视图函数名称就变为了&lt;code&gt;wrapper.__name__&lt;/code&gt;。当你针对多个视图函数使用了装饰器之后，在flask 的&lt;code&gt;user_map&lt;/code&gt;中会造成&lt;code&gt;endpoint&lt;/code&gt;的函数名冲突，进而抛出异常。&lt;/p&gt;
&lt;p&gt;所以基本功要扎实，&lt;code&gt;functools.wraps&lt;/code&gt;就是用来把被包装的函数名称原封不动地返回，以确保像 Flask 中这样依赖于函数名称的某些代码可以正常执行。因此，一个正确的写法应该是这样的：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; functools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decorater&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @functools.wraps(func)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; func(*args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样你的代码就可以正常运行了，当你检查&lt;code&gt;url_map&lt;/code&gt;时会发现&lt;code&gt;endpoint&lt;/code&gt;和视图函数一切正常。&lt;/p&gt;
&lt;h2 id=&quot;我为什么要在-Flask-中使用装饰器？&quot;&gt;&lt;a href=&quot;#我为什么要在-Flask-中使用装饰器？&quot; class=&quot;headerlink&quot; title=&quot;我为什么要在 Flask 中使用装饰器？&quot;&gt;&lt;/a&gt;我为什么要在 Flask 中使用装饰器？&lt;/h2&gt;&lt;p&gt;装饰器这个特性可以极大地降低我们代码的复杂度，同时也提高了代码的复用性。因为视图函数作为“MVC”模型中的“C”，有着承上启下的作用，负责链接数据层与视图。在 Flask 中，很多有用的插件都使用装饰器的方式为视图函数增加功能，即优雅有便捷。比如说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://flask-login.readthedocs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flask-Login&lt;/a&gt; 中常见的&lt;code&gt;@login_required&lt;/code&gt;，检查是否满足已登陆条件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pythonhosted.org/Flask-Cache/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flask-Cache&lt;/a&gt; 中用于缓存数据等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子很多，不一而足。&lt;/p&gt;
&lt;p&gt;当然，这些优秀插件只是免除了我们一部分造轮子的麻烦，为我们提供了某些解决问题的思路。但是有些小功能你也可以自己来实现。比如说在 Flask 中，作为主要逻辑处理的视图函数并没有相应的“try-catch”机制，因此很多时候即便是开启了 debug 模式也不能捕获发生在 视图函数中的所有异常。这让我曾经的调试一度非常痛苦。后来才想起使用装饰器可以非常简单地解决这个问题，也真算是后知后觉了。大概的思路如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_exception&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Since the flask does not provide a function for catching and analysing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    the exceptions, it&#39;s difficult that knowing what happened on the fly.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    If you decorate a view with this, the wrapper can handle the exceptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    and log it automatically.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param func: The view function to decorate.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :type func: function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @wraps(func)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decorated_view&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; func(*args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception, e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            current_app.logger.warn(traceback.format_exc())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; abort(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; decorated_view&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里只是提供了一个简单的思路：只要把这个装饰器用于视图函数，并且设置好 logger 的 handler，就可以捕获所有在视图函数执行过程中发生的异常并且记录下来。&lt;br&gt;这里的代码其实是有一点小问题的，因为在 Flask 中&lt;code&gt;abort&lt;/code&gt;的实现是继承了&lt;code&gt;HTTPException&lt;/code&gt;的一个异常抛出，所以上面的代码会把&lt;code&gt;abort&lt;/code&gt;也作为异常捕获到，并且重新抛出 500，这样会在某些场景下产生困惑。比如说一个简单的 404 却被展示成服务器错误。这点小问题就留给有兴趣的读者来解决好了 :)&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000003875420&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/q/1010000003875420&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318435599930270c0381a3b44db991cd6d858064ac0000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318435599930270c0381a3b44db991cd6d858064ac0000&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自从夸下海口从朋友那里接下私活，就开始抽空看看有关 Flask 的东西。还记得刚入职的时候学习 Django，只是 Tutorial 那几个小教程就翻来覆去看了几遍，最终还是有些一头雾水，又觉得过于繁杂，索性就算了。这次也趁此机会把 Flask 上手一下，也越发理解了为什么有人说“自定义的 Flask 最终也会变成一个 Django”，可能后面有时间再去把 Django 拾起来就没那么困难了。&lt;/p&gt;
&lt;p&gt;上面都是题外话，下面需要说的是一个关于 Flask 的一个小细节，首先我们需要明确一下在 Flask 中路由功能的实现过程是怎样的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://namco1992.github.io/tags/Python/"/>
    
      <category term="flask" scheme="http://namco1992.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>不停机条件下部署 Django 应用</title>
    <link href="http://namco1992.github.io/2015-12-09-deploying-a-django-app-with-no-downtime.html"/>
    <id>http://namco1992.github.io/2015-12-09-deploying-a-django-app-with-no-downtime.html</id>
    <published>2015-12-08T16:29:07.000Z</published>
    <updated>2016-06-07T13:35:46.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文由 伯乐在线 - Namco 翻译，jasper 校稿。未经许可，禁止转载！&lt;br&gt;英文出处：healthchecks。欢迎加入翻译组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当我们上线新的服务应用时，经常不得不重启Web服务器以完成部署。但这会对用户造成一定影响，特别是服务器处于繁忙状态时，问题更严重。本文中，作者将针对这一问题，讲述其如何在不停机条件下部署Django应用。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当我的网站 healthchecks.io 每秒接收的请求次数超过一次之后，我就非常清楚地认识到我不能再像以前那样部署代码之后随意重启 web 服务器了。作为一个监控服务，哪怕是漏掉几条 HTTP 的请求也是不能接受的。并且随着时间推移，服务器越来越忙碌，这个问题只会更严重。&lt;/p&gt;
&lt;p&gt;先让我简单介绍一下我在做什么吧：我在做的 app 是一个相对简单的 Django app，搭建在 gunicorn 的 WSGI 服务上，使用 nginx 作为代理服务器，而数据存储在 PostgreSQL 数据库上。gunicorn 进程和一个附加的后台作业都由 supervisor 管理。app 主机是一台区区 20 美元的 DigitalOcean 服务器。&lt;/p&gt;
&lt;p&gt;另外，鉴于当前技术选择的日新月异，我遵循的指导原则就是保证技术栈尽可能长时间地保持简单和可扩展。添加一些诸如负载均衡、数据库复制、键值对存储、消息队列等等的功能，这些功能的确都能带来某些益处。然而从另一方面来讲，这也意味着有更多东西需要管理、监控和备份。同时对于参与项目的新人来说，他们不得不花更多时间弄清楚系统的数据流向，从头开始建立起所有的东西。我认为在不牺牲性能和特性的前提下，能够保持简单不冗余的架构是一种有趣的挑战。&lt;/p&gt;
&lt;p&gt;我使用的部署机制是 Fabric 脚本加上 supervisor 和 nginx 的配置模板。每次我在工作站上运行 “fab deploy”命令时，Fabric 脚本会在远程服务器上完成如下事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为新的部署创建一个目录，姑且将之称为 $TARGET。&lt;/li&gt;
&lt;li&gt;在 $TARGET/venv 目录下建立一个 python3 的虚拟环境。&lt;/li&gt;
&lt;li&gt;从 GitHub 上抓取最新的代码快照到你的$TARGET目录。你可以使用 GitHub 的 SVN 接口运行“svn export”命令完成这项操作，非常简便。这项操作如你所愿地只是生成了源文件，但是没有任何版本控制的元数据。&lt;/li&gt;
&lt;li&gt;根据 requirements 文件安装依赖包。这些依赖包会安装在虚拟环境下而不会影响现有应用。下载和安装依赖包大概需要一分钟（这里的时间估算应当针对国外环境，国内的网络状况，你懂的 :) 译者注。）&lt;/li&gt;
&lt;li&gt;运行 Django 管理命令收集静态文件，执行数据库迁移等等准备工作。&lt;/li&gt;
&lt;li&gt;重写 supervisor 的配置文件，在新的虚拟环境下运行 gunicorn。&lt;/li&gt;
&lt;li&gt;更新 nginx 配置文件，以防改动过 nginx 配置模板中的某些配置没有生效。&lt;/li&gt;
&lt;li&gt;运行 “supervisorctl reload” 和“/etc/init.d/nginx restart”。当前 web 应用还是不能访问的，直到 supervisor 开始运行，启动 gunicorn 进程并且初始 Django 代码完成之后才能访问。这个过程通常需要 5 至 10秒，在这期间 nginx 一般会返回 “502 Bad Gateway”。&lt;/li&gt;
&lt;li&gt;大功告成！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是相关的 Fabric 脚本代码示例。脚本中使用的虚拟环境上下文管理器（virtualenv context manager）来源于非常棒的 fabtools 库。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot; Checks out code, prepares venv, runs management commands,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    updates supervisor and nginx configuration. &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    now = datetime.datetime.today()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    now_string = now.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y%m%d-%H%M%S&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    project_dir = &lt;span class=&quot;string&quot;&gt;&quot;/home/hc/webapps/hc-%s&quot;&lt;/span&gt; % now_string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    venv_dir = os.path.join(project_dir, &lt;span class=&quot;string&quot;&gt;&quot;venv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    svn_url = &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/healthchecks/healthchecks/trunk&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run(&lt;span class=&quot;string&quot;&gt;&quot;svn export %s %s&quot;&lt;/span&gt; % (svn_url, project_dir))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; cd(project_dir):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        run(&lt;span class=&quot;string&quot;&gt;&quot;virtualenv --python=python3 --system-site-packages venv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# local_settings.py is where things like access keys go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        put(&lt;span class=&quot;string&quot;&gt;&quot;local_settings.py&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        put(&lt;span class=&quot;string&quot;&gt;&quot;newrelic.ini&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; virtualenv(venv_dir):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            run(&lt;span class=&quot;string&quot;&gt;&quot;pip install -U gunicorn raven newrelic&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            run(&lt;span class=&quot;string&quot;&gt;&quot;pip install -r requirements.txt&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            run(&lt;span class=&quot;string&quot;&gt;&quot;python manage.py collectstatic --noinput&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            run(&lt;span class=&quot;string&quot;&gt;&quot;python manage.py compress&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; settings(user=&lt;span class=&quot;string&quot;&gt;&quot;hc&quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                run(&lt;span class=&quot;string&quot;&gt;&quot;python manage.py migrate&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                run(&lt;span class=&quot;string&quot;&gt;&quot;python manage.py ensuretriggers&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                run(&lt;span class=&quot;string&quot;&gt;&quot;python manage.py clearsessions&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    switch(project_dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(project_dir)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Supervisor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    upload_template(&lt;span class=&quot;string&quot;&gt;&quot;supervisor/hc.conf.tmpl&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;/etc/supervisor/conf.d/hc.conf&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    context=locals(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    backup=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    use_sudo=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    upload_template(&lt;span class=&quot;string&quot;&gt;&quot;supervisor/hc_sendalerts.conf.tmpl&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;/etc/supervisor/conf.d/hc_sendalerts.conf&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    context=locals(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    backup=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    use_sudo=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Nginx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    upload_template(&lt;span class=&quot;string&quot;&gt;&quot;nginx/hc.conf.tmpl&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;/etc/nginx/sites-enabled/hc.conf&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    context=locals(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    backup=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    use_sudo=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sudo(&lt;span class=&quot;string&quot;&gt;&quot;supervisorctl reload&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sudo(&lt;span class=&quot;string&quot;&gt;&quot;/etc/init.d/nginx reload&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在问题来了：在每次发布的最后一步怎样尽量避免停机？首先我们先设置如下约束条件：没有负载均衡（至少现在没有）。所有服务运行在一个环境下，尽可能避免一切错误返回。现在我们从最简单的步骤开始。我们先来考虑一种简单的（并且是常见的）场景：不会发生数据库迁移，并且部署的改动是向后兼容的：旧版本的 app 可以在迁移之后正常运行。&lt;/p&gt;
&lt;p&gt;我想到的第一个想法是基于这样一个观点：可用性对于 app 的某些部分更为重要，而对于其他部分可能就没那么重要了。具体到我的 app 来说，比如 app 监听客户机发来的 ping 包的 API 接口部分就需要更高的可用性，而给普通访问者提供的前端服务页面部分就没有那么重要了。尽管给访问者返回了错误页面十分尴尬，但是不遗漏任何一个 ping 包才是最重要的。毕竟我们提供的是监控服务，一个丢失的 ping 包可能导致在之后某个时间发出一个假警报——这才是最尴尬的！&lt;/p&gt;
&lt;p&gt;我考虑使用亚马逊 API 监听这些 ping 包，并且设计了个原型。它可以把 ping 包信息放在 亚马逊 SQS 队列中，当 Django app 有空闲时再处理。这是一种相对简单的处理方法，大幅提高了可用性和扩展性，但是也是以增加复杂度和添加新的外部依赖为代价的。我可能在之后还需要重新审视一下这个方案。&lt;/p&gt;
&lt;p&gt;下一个想法是这样的：把监听 ping 包的功能从原来的 app 中剥离出来。ping 监听的逻辑其实非常简单，最终只相当于两个 SQL 操作：update 和 insert。这一部分代码重构起来非常容易，比如使用一个 python 的微型框架，或者使用其他的语言实现，甚至可以用 nginx 本身的 ngx_postgres 模型来实现。下面提供了基本实现了这个功能的 nginx 配置文件，仅供消遣（忽略掉那个写得很滑稽的正则表达式 :)）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;location ~ ^/(wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww)/?$ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    add_header Content-Type text/plain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postgres_pass   database;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postgres_output value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postgres_escape $ip $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postgres_escape $agent =$http_user_agent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postgres_escape $body =$request_body;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postgres_query &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        WITH t AS (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            UPDATE api_check&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            SET last_ping=now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            WHERE code=&amp;apos;$1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            RETURNING id, last_ping&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INSERT INTO api_ping&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (created, remote_addr, method, ua, body, owner_id, scheme)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            last_ping, $ip, &amp;apos;$request_method&amp;apos;, $agent, $body, id, &amp;apos;$scheme&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FROM t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RETURNING &amp;apos;OK&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postgres_rewrite no_changes 400;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面配置的执行逻辑是这样的：当用户请求特定格式的 URL 时，服务器会在 PostgreSQL 数据库上查询并且返回，返回码是 200 或者 400。这对性能也是一种提升，因为请求不需要在跑一遍 gunicorn，Django 和 psycopg2 然后才返回了。只要数据库可用，nginx 就可以处理这些 ping 包，即便是 Django 应用意外宕机了也没关系。&lt;/p&gt;
&lt;p&gt;然而这种实现方式在某些情况下并非最好选择，这种方式有一定技巧性，并且要求开发者和系统管理员的知识储备要足够丰富才行。举个例子，当数据库模式发生改变，上面的 SQL 查询也需要更新和测试。如果启用了 ngx_postgres 的扩展组件的话，这就不像“apt-get install” 这种操作这么简单了。&lt;/p&gt;
&lt;p&gt;我们的主要目的还是达成不停机部署，如果再仔细考虑一下的话，如果能仔细协调好重启和重新加载服务的流程的话，也是可以达成的。&lt;/p&gt;
&lt;p&gt;我的部署脚本使用“/etc/init.d/nginx restart”是因为我不知道更好的选择了。但是据我了解，这个命令可以替换成“/etc/init.d/nginx reload”，以实现优雅地重启：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行“service nginx reload”或者“/etc/init.d/nginx reload”将会热重载配置从而消除停机时间。如果还有等待的请求，只要连接还没有断开，nginx进程就会接着处理这些连接。因此这是一个非常优雅地重载配置的方式。&lt;br&gt;—— “Nginx config reload without downtime” on ServerFault&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样的，我的部署脚本使用的“supervisorctl reload”命令会停止所有管理的服务，重新读取配置，最后启动所有服务。而“supervisorctl update”可以按需启动、停止和重启修改后的任务。&lt;/p&gt;
&lt;p&gt;改良之后的 “fab deploy” 可以完成以下任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立一个新的虚拟环境，和之前一样。&lt;/li&gt;
&lt;li&gt;创建一个唯一名称的 supervisor 任务（比如“hc_timestamp”）。&lt;/li&gt;
&lt;li&gt;与已经运行的 gunicorn 进程并行启动一个新的 gunicorn 进程。nginx 与使用 UNIX 套接字的 gunicorn 进程通信，每个进程使用单独的，带有时间戳的套接字文件。&lt;/li&gt;
&lt;li&gt;等待一段时间，直到新的 gunicorn 进程已启动并且可以正常服务。&lt;/li&gt;
&lt;li&gt;更新 nginx 配置文件并且指向新的套接字配置文件，重新加载 nginx。&lt;/li&gt;
&lt;li&gt;停掉老的 gunicorn 进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是更新之后的 Fabric 脚本，也实现了 supervisor 任务：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tag, project_dir)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Supervisor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    supervisor_conf_path = &lt;span class=&quot;string&quot;&gt;&quot;/etc/supervisor/conf.d/hc_%s.conf&quot;&lt;/span&gt; % tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    upload_template(&lt;span class=&quot;string&quot;&gt;&quot;supervisor/hc.conf.tmpl&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    supervisor_conf_path,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    context=locals(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    backup=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    use_sudo=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    upload_template(&lt;span class=&quot;string&quot;&gt;&quot;supervisor/hc_sendalerts.conf.tmpl&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;/etc/supervisor/conf.d/hc_sendalerts.conf&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    context=locals(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    backup=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    use_sudo=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Starts up gunicorn from the new virtualenv&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sudo(&lt;span class=&quot;string&quot;&gt;&quot;supervisorctl update&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Give it some time to start up&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Let&#39;s check the new server is nominally working&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# gunicorn listens on UNIX socket so this is a bit contrived:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l = (&lt;span class=&quot;string&quot;&gt;&quot;GET /about/ HTTP/1.0rn&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;string&quot;&gt;&quot;Host: healthchecks.iorn&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;string&quot;&gt;&quot;rn&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cmd = &lt;span class=&quot;string&quot;&gt;&#39;echo -e &quot;%s&quot; | nc -U /tmp/hc-%s.sock&#39;&lt;/span&gt; % (l, tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Look for known string in response. If it&#39;s not found, something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# is wrong with the new deployment and we abort&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Monkey See Monkey Do&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; run(cmd, quiet=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# nginx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    upload_template(&lt;span class=&quot;string&quot;&gt;&quot;nginx/hc.conf.tmpl&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;/etc/nginx/sites-enabled/hc.conf&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    context=locals(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    backup=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    use_sudo=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sudo(&lt;span class=&quot;string&quot;&gt;&quot;/etc/init.d/nginx reload&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# should be live now - remove supervisor conf for previous versions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s = sudo(&lt;span class=&quot;string&quot;&gt;&quot;for i in /etc/supervisor/conf.d/*.conf; do echo $i; done&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s.split(&lt;span class=&quot;string&quot;&gt;&quot;n&quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        line = line.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; line == supervisor_conf_path:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; line.startswith(&lt;span class=&quot;string&quot;&gt;&quot;/etc/supervisor/conf.d/hc_2&quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sudo(&lt;span class=&quot;string&quot;&gt;&quot;rm %s&quot;&lt;/span&gt; % line)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# This stops gunicorn processes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sudo(&lt;span class=&quot;string&quot;&gt;&quot;supervisorctl update&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的话 nginx 就可以一直提供服务响应，然后和正在运行的 gunicorn 进程持续保持通信。为了实际验证，我写了一个脚本无限循环地请求特定的 URL。如果得到了一个非正确的返回，就会打印出来一个显眼的错误消息。使用这个脚本不断冲击我的测试虚拟机的同时，我做了一些部署操作，并没有发现丢失的请求。大功告成！&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;要实现在代码部署时不停机，有很多种方式，每种方式都要权衡利弊。比如说一个合理的策略是把关键部分从原来的应用中剥离出来，每个部分都可以独立更新。之后每个部分也可以独立扩展。但是这种策略的缺点就是有更多的代码和配置需要维护。&lt;/p&gt;
&lt;p&gt;最终我达成的效果是：&lt;/p&gt;
&lt;p&gt;热重载 supervisor 和 nginx 配置，而不是直接重启它们。根据之前的经验，这种做法的好处是显而易见的。&lt;br&gt;在停止旧的 gunicorn 进程之前，确认新的 gunicorn 进程已经启动并且与 nginx 正常通信&lt;br&gt;保持整个架构相对简单。当这个项目有更多人在用时，我需要找出性能短板并且想办法水平扩展。但是现在就要考虑到这一点。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文由 伯乐在线 - Namco 翻译，jasper 校稿。未经许可，禁止转载！&lt;br&gt;英文出处：healthchecks。欢迎加入翻译组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当我们上线新的服务应用时，经常不得不重启Web服务器以完成部署。但这会对用户造成一定影响，特别是服务器处于繁忙状态时，问题更严重。本文中，作者将针对这一问题，讲述其如何在不停机条件下部署Django应用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://namco1992.github.io/tags/Python/"/>
    
      <category term="翻译" scheme="http://namco1992.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>深入 Python 整数对象的实现</title>
    <link href="http://namco1992.github.io/2015-11-21-realization-of-integer-object-of-python.html"/>
    <id>http://namco1992.github.io/2015-11-21-realization-of-integer-object-of-python.html</id>
    <published>2015-11-21T14:31:45.000Z</published>
    <updated>2016-06-07T13:35:14.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文由 伯乐在线 - Namco 翻译，wrm 校稿。未经许可，禁止转载！&lt;br&gt;英文出处：Laurent Luce。欢迎加入翻译组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;深入 Python 整数对象的实现 &lt;strong&gt;&lt;a href=&quot;http://www.laurentluce.com/posts/python-integer-objects-implementation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阅读原文 »&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文会深入探究 在Python 内部整数对象是如何实现的。&lt;/p&gt;
&lt;p&gt;在 Python 内部，一个整数对象是用 PyIntObject 结构来表示的，该整数对象的值属性为 long 型。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PyObject_HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; ob_ival;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; PyIntObject;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了避免每次要用到整数对象的时候都要分配一个新的内存，Python 预先为一批尚未使用的空闲整数对象分配了一块内存。&lt;/p&gt;
&lt;p&gt;下面这个结构就是 Python 用来给整数对象分配内存的，这些整数对象又叫作 PyIntObjects 。该结构初始化完成之后，当 Python 脚本中为新的对象赋值的时候就可以直接使用之前分配好的整数对象了。这个结构叫做“PyIntBlock”，定义如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _intblock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _intblock *next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PyIntObject objects[N_INTOBJECTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _intblock PyIntBlock;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 在给一批整数对象分配内存块时，这些对象实际上并没有被赋值。我们把这些对象叫做“待用的空闲整数对象”。在 Python 程序中，当一个新的整数值被使用时，这个值就会被赋给下一个可用的整数对象。因为空闲整数对象被赋值的过程中不需要内存分配，所以速度很快。&lt;/p&gt;
&lt;p&gt;在同一个块内部的这些整数对象是通过叫做“ob_type”的内部指针从后往前倒序链接在一起的。这里需要注意的是，Python 的源码中存在对内部指针的滥用情况，所以对于指针的名字不用太过纠结。&lt;/p&gt;
&lt;p&gt;每一个整数块包含了k个整数对象，k等于 1 KB 的内存块可以容纳的整数对象的数目，在我 64 位电脑上大概是 40 个 PyIntObject 对象。当这个块中所有的整数对象都用完了的时候，就会分配一块新的内存给新的整数对象列表。&lt;/p&gt;
&lt;p&gt;已经分配的整数对象内存块是通过一个单向链表来记录的。在Python内部这个列表叫做“block_list”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.laurentluce.com/images/blog/intobject/1.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 Python 中使用了一种特殊结构提前为一部分小整数分配了空间，以便快速访问。这是一个包含 262 个指向整数对象的指针的数组（在下文会称之为小整数数组）。这些小整数对象会在（前面提到的）整数对象块进行初始化时被分配，它们的范围是 -5 到 256。许多 Python 程序会频繁使用这一范围内的整数，所以这种预处理的办法非常巧妙。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NSMALLPOSINTS           257&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NSMALLNEGINTS           5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; PyIntObject *small_ints[NSMALLNEGINTS + NSMALLPOSINTS];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://www.laurentluce.com/images/blog/intobject/2.png&quot; alt=&quot;Python integer object internals&quot;&gt;&lt;/p&gt;
&lt;p&gt;值为 -5 的整数对象在这个小整数数组中偏移量为0，也就是说位于数组的第一个位置，值为 -4 的整数对象偏移量就是 1，以此类推。&lt;/p&gt;
&lt;p&gt;试想一下，在 Python 脚本中定义下面一个整数会发生什么？&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你执行第一行的时候，就调用了 PyInt_FromLong 函数，函数逻辑如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if integer value in range -5,256:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return the integer object pointed by the small integers array at the &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    offset (value + 5).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if no free integer object available:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        allocate new block of integer objects &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set value of the next free integer object in the current block &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    of integers.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return integer object&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我们这个例子中，整数 1 由小整数数组中第 1 + 5 = 6 个指针所指。函数返回指向该整数对象的指针，然后变量“a”就会指向这个整数对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.laurentluce.com/images/blog/intobject/3.png&quot; alt=&quot;Python integer object internals&quot;&gt;&lt;/p&gt;
&lt;p&gt;让我们看一下另外一个例子：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a=&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;300 并没有在小整数数组的范围内，所以就需要把一个空的整数对象赋值为 300。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.laurentluce.com/images/blog/intobject/4.png&quot; alt=&quot;Python integer object internals&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你看过 Python 2.6 源码中的 intobject.c 文件，你就会看到许多处理相加、相乘、转换等运算操作的函数。比如说下面这个比较函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;int_compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PyIntObject *v, PyIntObject *w)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; i = v-&amp;amp;gt;ob_ival;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; j = w-&amp;amp;gt;ob_ival;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (i &amp;amp;lt; j) ? &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; : (i &amp;amp;gt; j) ? &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;整数对象的值储存在对象的 ob_ival 属性中，类型为 long。每个值都存放在一个寄存器中以优化存取过程，所以比较操作是在两个寄存器之间完成的。如果 v 指向的整数对象小于 w 指向的整数对象，返回 -1；反之则返回 1。相等的情况下返回 0。&lt;/p&gt;
&lt;p&gt;对 Python 中整数的实现就介绍到这里了。希望你们能喜欢这篇文章并且有所收获。如果你有什么想法就在下方留言吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文由 伯乐在线 - Namco 翻译，wrm 校稿。未经许可，禁止转载！&lt;br&gt;英文出处：Laurent Luce。欢迎加入翻译组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;深入 Python 整数对象的实现 &lt;strong&gt;&lt;a href=&quot;http://www.laurentluce.com/posts/python-integer-objects-implementation/&quot;&gt;阅读原文 »&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文会深入探究 在Python 内部整数对象是如何实现的。&lt;/p&gt;
&lt;p&gt;在 Python 内部，一个整数对象是用 PyIntObject 结构来表示的，该整数对象的值属性为 long 型。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://namco1992.github.io/tags/Python/"/>
    
      <category term="翻译" scheme="http://namco1992.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Python 的运行时方法补丁技术</title>
    <link href="http://namco1992.github.io/2015-11-19-Python-running-patch-method.html"/>
    <id>http://namco1992.github.io/2015-11-19-Python-running-patch-method.html</id>
    <published>2015-11-19T13:56:14.000Z</published>
    <updated>2016-06-07T13:40:13.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文由 伯乐在线 - Namco 翻译，赖信涛 校稿。未经许可，禁止转载！&lt;br&gt;英文出处：blog.tryolabs.com。欢迎加入翻译组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相信很多朋友在编程的时候都会想修改一下已经写好的程序行为代码，而最常见的方式就是通过子类来重写父类的一些不满足需求的方法。比如说下面这个例子。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Dog:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def bark(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &#39;Woof!&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Husky(Dog):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def bark(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &#39;Howl!&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以用上述方式来修改我们自己写的代码，但是我们应该怎么修改第三方代码呢？当然，我们也可以自己编写一个子类，调用子类的实例对象来实现修改，但是这样可能会引入其他一系列问题。所以我们得想个办法用我们自己的方法替换掉原来的对象方法，这就是本文接下来要介绍的“打补丁”的方式。&lt;/p&gt;
&lt;h2 id=&quot;给类打补丁&quot;&gt;&lt;a href=&quot;#给类打补丁&quot; class=&quot;headerlink&quot; title=&quot;给类打补丁&quot;&gt;&lt;/a&gt;给类打补丁&lt;/h2&gt;&lt;p&gt;如果我们想新增或是修改对象的方法的话，最简单的方式莫过于给类打个补丁了。结合上面的例子，如果我们想给我们自己的 Dog 类写一个新的 howl 方法的话，我们可以定义一个新的 howl 函数，像下面的代码一样把它添加到我们的类中：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;newbark&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Wrooof!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;howl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Howl!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Replace an existing method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dog.bark = newbark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Add a new method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dog.howl = howl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很简单吧？但是这里有几个问题需要我们注意。首先，被修改的类的所有实例中的方法都会被更新，所以更新后的方法不仅仅存在于新创建的对象中，之前创建的所有对象都会拥有更新之后的方法，除非只是新增而不是覆盖掉原来的方法。第二，你修改或者新增的方法应当是与对象绑定的，所以方法的第一个参数应当是被调用的对象（在这里就是类的实例self）。&lt;/p&gt;
&lt;h2 id=&quot;给项目打补丁&quot;&gt;&lt;a href=&quot;#给项目打补丁&quot; class=&quot;headerlink&quot; title=&quot;给项目打补丁&quot;&gt;&lt;/a&gt;给项目打补丁&lt;/h2&gt;&lt;p&gt;单个对象也可以在不影响这个类的其他实例的情况下打补丁。但是还是有点小技巧的哦！先让我们看看下面这个例子。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;herd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, sheep)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.run()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.bark()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.run()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;border_collie = Dog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;border_collie.herd = herd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后我们再试试调用新定义的方法：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;border_collie.herd(sheep)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeError: herd() takes exactly &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; arguments (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; given)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The problem &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; the previous code &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; that the herd &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; a bound method, just take a look at the following code:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; border_collie.herd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;function herd at &lt;span class=&quot;number&quot;&gt;0xf9c5f0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;出错啦！引发错误的原因就是被调用的对象并没有作为第一个参数传给我们写的函数。当然我们可以自己把参数传进去，但是在这个替换类方法的场景下并不奏效。解决这个问题的正确方案是用 type 这个模块里的 MethodType 函数，我们可以看看下面的示例代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import types&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;border_collie = Dog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;border_collie.herd  = types.MethodType(herd, border_collie)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print border_collie.herd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在我们的方法已经和实例绑定了，大功告成！&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;运行中替换或者添加方法是非常有用的，比如说在单元测试中，有些负责和外界服务通信的函数就需要替换掉，方便测试。这个技巧不仅很常用，而且在你最终决定要修改代码之前还可以保持代码的可维护性，是一个非常重要的技巧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文由 伯乐在线 - Namco 翻译，赖信涛 校稿。未经许可，禁止转载！&lt;br&gt;英文出处：blog.tryolabs.com。欢迎加入翻译组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相信很多朋友在编程的时候都会想修改一下已经写好的程序行为代码，而最常见的方式就是通过子类来重写父类的一些不满足需求的方法。比如说下面这个例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://namco1992.github.io/tags/Python/"/>
    
      <category term="翻译" scheme="http://namco1992.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
</feed>
